{"version":3,"sources":["components/SVGGrid/index.js","data/Dispatcher.js","data/Constants.js","data/Store.js","data/Actions.js","data/API.js","components/App/index.js","index.js"],"names":["SVGGrid","_this$props","this","props","cellSizeInPx","maxX","width","maxY","height","react_default","a","createElement","x1","y1","x2","y2","_this$props2","gridLines","i","push","_this$props3","nodes","length","nodeCells","forEach","node","_node$Location","Location","X","Y","radius","cx","cy","r","fill","x","y","text-anchor","font-size","font-family","dy","Value","_this$props4","bots","botCells","bot","_bot$Location","Score","id","Id","_this","_this$props5","botClaimLines","_bot$Location2","botX","botY","Claims","claim","findNodeById","nodeX","nodeY","className","_this$props6","renderBorder","renderGridLines","renderNodes","renderBotClaims","renderBots","Component","Dispatcher","ACTIONS","GOT_DATA","store","action","type","value","emit","EventEmitter","dispatcher","register","handleActions","bind","getData","url","Promise","all","request","get","concat","then","data","JSON","parse","text","Bots","Nodes","fetchData","dispatch","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setStateFromStore","setState","Store","getValuesFromStore","state","on","setInterval","removeListener","Grid","Row","Col","PageHeader","SVGGrid_SVGGrid","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.7884a1e2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './style.scss';\n\nexport default class SVGGrid extends Component {\n\n  /**\n   * Renders the BORDER of the GRID\n   */\n  renderBorder() {\n    const {cellSizeInPx, width, height} = this.props;\n    const maxX = cellSizeInPx * width;\n    const maxY = cellSizeInPx * height;\n\n    return [\n        <line x1=\"0\" y1=\"0\" x2={maxX} y2=\"0\" />,\n        <line x1=\"0\" y1=\"0\" x2=\"0\" y2={maxY} />,\n        <line x1=\"0\" y1=\"0\" x2=\"0\" y2={maxY} />,\n        <line x1={maxX} y1={maxY} x2={maxX} y2=\"0\" />,\n        <line x1={maxX} y1={maxY} x2=\"0\" y2={maxY} />,\n    ];\n  }\n\n  /**\n   * Renders the LINEs of the GRID\n   */\n  renderGridLines() {\n    const {cellSizeInPx, width, height} = this.props;\n    const maxX = cellSizeInPx * width;\n    const maxY = cellSizeInPx * height;\n\n    const gridLines = [];\n\n    for(let i = 0; i < width; i++) {\n      gridLines.push(\n        <line x1=\"0\" y1={i * cellSizeInPx} x2={maxX} y2={i * cellSizeInPx} />\n      )\n    }\n    for(let i = 0; i < height; i++) {\n      gridLines.push(\n        <line y1=\"0\" x1={i * cellSizeInPx} y2={maxY} x2={i * cellSizeInPx} />\n      )\n    }\n\n    return gridLines;\n  }\n\n  /**\n   * Renders the NODEs on the GRID\n   */\n  renderNodes() {\n    const {cellSizeInPx, width, nodes} = this.props;\n\n    if (nodes.length === 0) {\n      return;\n    }\n\n    const nodeCells = [];\n\n    nodes.forEach((node) => {\n      const {X, Y} = node.Location;\n      const radius = width + 2.5;\n      const cx = (X+1) * cellSizeInPx - radius;\n      const cy = (Y+1) * cellSizeInPx - radius;\n      const offset = 2.5;\n      nodeCells.push(\n        <circle\n          cx={cx  - offset}\n          cy={cy - offset}\n          r={radius}\n          fill=\"#aeaeae\"\n        />\n      );\n      nodeCells.push(\n        <text\n          x={cx - offset}\n          y={cy - offset}\n          text-anchor=\"middle\"\n          fill=\"black\"\n          font-size=\"18px\"\n          font-family=\"Arial\"\n          dy=\".3em\">{node.Value}</text>\n      );\n    });\n\n    return nodeCells;\n  }\n\n  /**\n   * Renders the BOTs on the GRID\n   */\n  renderBots() {\n    const {cellSizeInPx, width, bots} = this.props;\n\n    if (bots.length === 0) {\n      return;\n    }\n\n    const botCells = [];\n\n    bots.forEach((bot) => {\n      const {X, Y} = bot.Location;\n      const radius = width + 2.5;\n      const cx = (X+1) * cellSizeInPx - radius;\n      const cy = (Y+1) * cellSizeInPx - radius;\n      const offset = 2.5;\n      botCells.push(\n        <circle\n          cx={cx - offset}\n          cy={cy - offset}\n          r={radius}\n          fill=\"red\"\n        />\n      );\n      botCells.push(\n        <text\n          x={cx - offset}\n          y={cy - offset}\n          text-anchor=\"middle\"\n          fill=\"white\"\n          font-size=\"18px\"\n          font-family=\"Arial\"\n          dy=\".3em\">{bot.Score}</text>\n      );\n    });\n\n    return botCells;\n  }\n\n  /**\n   * A helper function to find a given NODE by it's ID\n   */\n  findNodeById(id) {\n    const {nodes} = this.props;\n\n    let node;\n    nodes.forEach((x) => {\n      if (x.Id === id) {\n        node = x;\n      }\n    });\n\n    return node;\n  }\n\n  /**\n   * Draws lines beteen BOTs and any NODEs that they have a claim on\n   */\n  renderBotClaims() {\n    const {cellSizeInPx, width, bots} = this.props;\n\n    const botClaimLines = [];\n\n    bots.forEach((bot) => {\n      const {X, Y} = bot.Location;\n      const radius = width + 2.5;\n      const botX = (X+1) * cellSizeInPx - radius;\n      const botY = (Y+1) * cellSizeInPx - radius;\n\n      if (bot.Claims.length === 0) {\n        return;\n      }\n      bot.Claims.forEach((claim) => {\n        const node = this.findNodeById(claim);\n        const nodeX = (node.Location.X+1) * cellSizeInPx - radius;\n        const nodeY = (node.Location.Y+1) * cellSizeInPx - radius;\n        botClaimLines.push(\n          <line\n            className=\"bot-claim-line\"\n            x1={botX}\n            y1={botY}\n            x2={nodeX}\n            y2={nodeY}\n          />\n        );\n      });\n    });\n\n    return botClaimLines;\n  }\n\n  render() {\n    const {cellSizeInPx, width, height} = this.props;\n\n    return (\n      <svg\n        width={width * cellSizeInPx}\n        height={height * cellSizeInPx}\n      >\n        {this.renderBorder()}\n        {this.renderGridLines()}\n        {this.renderNodes()}\n        {this.renderBotClaims()}\n        {this.renderBots()}\n      </svg>\n    );\n  }\n\n}\n","import {Dispatcher} from 'flux';\n\nexport default new Dispatcher();\n","export const ACTIONS = {\n    GOT_DATA: 'GOT_DATA',\n};\n","import dispatcher from './Dispatcher';\nimport {EventEmitter} from 'events';\nimport {ACTIONS} from './Constants';\n\nlet bots = [];\nlet nodes = [];\n\nclass Store extends EventEmitter {\n\n  handleActions(action) {\n\n    switch (action.type) {\n        case ACTIONS.GOT_DATA: {\n          bots = action.value.bots;\n          nodes = action.value.nodes;\n          break;\n        }\n        default: {\n          break;\n        }\n    }\n\n    this.emit(\"storeUpdated\");\n  }\n\n  getValuesFromStore() {\n    return {\n      bots,\n      nodes\n    };\n  }\n}\n\nconst store = new Store();\ndispatcher.register(store.handleActions.bind(store));\nexport default store;\n","import dispatcher from './Dispatcher';\nimport {ACTIONS} from './Constants';\nimport {fetchData} from './API';\n\nexport function getData(value) {\n  fetchData().then((data) => {\n    dispatcher.dispatch({\n      type: ACTIONS.GOT_DATA,\n      value: data,\n    });\n  });\n}\n","import request from 'superagent';\n\nexport function fetchData() {\n  const url = 'https://headlight-tournament-4.herokuapp.com';\n  return Promise.all([\n    request.get(`${url}/bots`),\n    request.get(`${url}/nodes`),\n  ])\n    .then(data => {\n      const bots = JSON.parse(data[0].text).Bots;\n      const nodes = JSON.parse(data[1].text).Nodes;\n      return {\n        bots,\n        nodes\n      };\n    });\n}\n","import React, { Component } from 'react';\nimport SVGGrid from '../SVGGrid'\nimport Store from '../../data/Store';\nimport {getData} from '../../data/Actions';\n\nimport { Grid, Row, Col, PageHeader } from 'react-bootstrap';\n\nexport default class App extends Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = Store.getValuesFromStore();\n  }\n  \n  setStateFromStore = () => {\n    this.setState(Store.getValuesFromStore());\n  }\n  \n  componentDidMount() {\n    Store.on(\"storeUpdated\", this.setStateFromStore);\n    setInterval(getData, 1000);\n  }\n\n  componentWillUnmount() {\n    Store.removeListener(\"storeUpdated\", this.setStateFromStore);\n  }\n\n  render() {\n    return (\n      <div>\n        <Grid>\n          <Row>\n            <Col>\n              <PageHeader>Real Time Bot Locations</PageHeader>\n              <div>\n               Red : BOT - shown with score <br />\n               Gray : Node - shown with score <br />\n               Green : Lines connecting a BOT to claimed nodes\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <SVGGrid\n                cellSizeInPx={50}\n                width={20}\n                height={20}\n                bots={this.state.bots}\n                nodes={this.state.nodes}\n              />\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}